const fs = require('fs');
const path = require('path');
const {compile} = require('json-schema-to-typescript');
const yaml = require('js-yaml');

const loadSchema = file => {
  if (/\.ya?ml$/.exec(file) !== null) {
    return yaml.load(fs.readFileSync(file));
  } else if (/\.json/.exec(file) !== null) {
    return JSON.parse(fs.readFileSync(file).toString());
  } else {
    throw new Error('Unrecognized API schema format');
  }
};

const schemaJsonTemplate = ({schemas}) => ({
  $schema: 'http://json-schema.org/draft-07/schema',
  title: '_',
  anyOf: schemas.map(schema => {
    if (schema.inputFile !== undefined) {
      return {$ref: `/${schema.inputFile}`};
    } else {
      console.log(schema);
      return schema.schema;
    }
  }),
});

const schemaTemplate = ({schemas, compiled}) => `
/* tslint:disable */
/**
 * This file was automatically generated by bin/compile_schemas.js.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run bin/compile_schemas.js to regenerate this file.
 */

import Ajv from 'ajv'
const ajv = new Ajv({ coerceTypes: true })
${schemas
  .map(
    ({inputFile, outputFile, schema}) => `
const _${schema.title}_schema = ${
      outputFile !== undefined
        ? `require('${outputFile}')`
        : JSON.stringify(schema)
    }
ajv.addSchema(_${schema.title}_schema, ${
      inputFile !== undefined ? `'/${inputFile}'` : `'#${schema.title}'`
    })`,
  )
  .join('')}

${compiled}${schemas
  .map(
    ({schema: {title}}) => `
export class ${title}C {
  static schema = _${title}_schema
  static validate = ajv.compile(${title}C.schema)
  static from(data: any): ${title} {
    if (${title}C.validate(data)) {
      return data as ${title}
    } else {
      throw new Error('Error validating data as ${title}')
    }
  }
}`,
  )
  .join('')}
`;

const compileJSONSchemaToTs = ({schemas, input_root}) =>
  compile(schemaJsonTemplate({schemas}), '_', {
    bannerComment: '',
    $refOptions: {
      resolve: {
        root: {
          order: 1,
          canRead: () => true,
          read: ({url}) => {
            return fs.readFileSync(path.join(input_root, url));
          },
        },
      },
    },
    cwd: input_root,
  }).then(compiled => schemaTemplate({schemas, compiled}));

module.exports = {
  loadSchema,
  compileJSONSchemaToTs,
};
